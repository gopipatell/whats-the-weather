{"version":3,"sources":["components/Header.js","components/NotFound.js","components/Weather.js","components/Widget.js","App.js","serviceWorker.js","index.js"],"names":["Header","NotFound","props","className","Weather","src","data","icon","temperature","Math","round","city","description","wind","Widget","state","url","this","console","log","fetch","method","then","results","json","setState","name","main","temp","speed","weather","catch","e","status","React","Component","App","search","window","location","URLSearchParams","get","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAWeA,MATf,WACE,OACE,6BACE,6CACA,4D,0CCOSC,EAXE,SAASC,GACxB,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,aACb,wCACA,uBAAGA,UAAU,QAAb,yBCWOC,EAhBC,SAASF,GAEvB,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,OAAOE,IAAK,oCAAoCH,EAAMI,KAAKC,KAAK,YAC/E,yBAAKJ,UAAU,eACdD,EAAMI,KAAKE,YADZ,QAEE,0BAAML,UAAU,SAAhB,KAA2BM,KAAKC,MAA6B,EAAvBR,EAAMI,KAAKE,YAAc,EAAI,IAAnE,UAEF,yBAAKL,UAAU,QAAQD,EAAMI,KAAKK,MAClC,uBAAGR,UAAU,eAAeD,EAAMI,KAAKM,aACvC,yBAAKT,UAAU,WAAf,QAA+BD,EAAMI,KAAKO,KAA1C,W,mkBC+CSC,E,YAtDb,aAAc,IAAD,8BACX,+CACKC,MAAQ,CACX,YAAe,MAHN,E,iFAQQ,IAAD,OACZC,EAAG,4DAAwDC,KAAKf,MAAMS,KAAnE,2CACTO,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,KAAKf,MAAMS,MAEvBS,MAAMJ,EAAK,CACCK,OAAQ,QACTC,MAAK,SAAAC,GACJ,OAAOA,EAAQC,UAChBF,MAAK,SAAAhB,GACNY,QAAQC,IAAI,WAAYb,GACxB,EAAKmB,SAAS,CACV,OAAU,UACV,KAAQnB,EAAKoB,KACb,YAAejB,KAAKC,MAAMJ,EAAKqB,KAAKC,KAAO,QAC3C,KAAOtB,EAAKO,KAAKgB,MACjB,QAAUvB,EAAKwB,QAAQ,GAAGH,KAC1B,YAAcrB,EAAKwB,QAAQ,GAAGlB,YAC9B,KAAQN,EAAKwB,QAAQ,GAAGvB,UAE3BwB,OAAM,SAAAC,GAAC,OAAI,EAAKP,SAAS,CAC1B,OAAU,kB,+BAOpB,MAAyB,YAAtBR,KAAKF,MAAMkB,OAEV,kBAAC,EAAD,CAAS3B,KAAI,KAAMW,KAAKF,SAEK,aAAtBE,KAAKF,MAAMkB,OAElB,kBAAC,EAAD,MAIA,yBAAK9B,UAAU,UAAf,kB,GA/Ca+B,IAAMC,W,MCeZC,MAff,WAEE,IAAIC,EAASC,OAAOC,SAASF,OAEzB1B,EADS,IAAI6B,gBAAgBH,GACfI,IAAI,QAGtB,OACE,yBAAKtC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAQQ,KAAMA,MCHA+B,QACW,cAA7BJ,OAAOC,SAASI,UAEe,UAA7BL,OAAOC,SAASI,UAEhBL,OAAOC,SAASI,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.7480c2c3.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header() {\n  return (\n    <div>\n      <h1> Weather App </h1>\n      <h3> What's the weather today?</h3>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from 'react';\n\nconst NotFound = function(props) {\n  return (\n    <div className=\"widget\">\n      <div className=\"not-found\">\n        <p>Not found</p>\n        <p className=\"icon\">ü§∑‚Äç</p>\n      </div>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from 'react';\n\nconst Weather = function(props) {\n\n  return (\n    <div className=\"widget\">\n      <img className=\"icon\" src={\"http://openweathermap.org/img/wn/\"+props.data.icon+\"@2x.png\"} />\n      <div className=\"temperature\">\n      {props.data.temperature}¬∞C\n        <span className=\"tempf\">/ {Math.round(props.data.temperature*9/5 + 32)}¬∞F</span>\n      </div>\n      <div className=\"city\">{props.data.city}</div>\n      <p className=\"description\">{props.data.description}</p>\n      <div className=\"details\">Wind {props.data.wind} km/h</div>\n    </div>\n    );\n}\n\nexport default Weather;\n","import React from 'react';\nimport NotFound from './NotFound';\nimport Weather from './Weather';\nimport './Widget.css';\n\nclass Widget extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      \"temperature\": \"29\"\n\n    }\n  }\n\n  componentDidMount() {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.props.city}&appid=Bb4d7e1fa9d1c3d0899f27b1cf01c93c`;\n    console.log(url);\n    console.log(this.props.city);\n\n    fetch(url, {\n                method: 'GET'\n            }).then(results => {\n                return results.json();\n            }).then(data => {\n              console.log('data is ', data);\n              this.setState({\n                  \"status\": \"success\",\n                  \"city\": data.name,\n                  \"temperature\": Math.round(data.main.temp - 273.15),\n                  \"wind\":data.wind.speed,\n                  \"weather\":data.weather[0].main,\n                  \"description\":data.weather[0].description,\n                  \"icon\": data.weather[0].icon\n              });\n            }).catch(e => this.setState({\n              \"status\": \"notfound\"\n            }));\n\n  }\n\nrender() {\n\n    if(this.state.status === \"success\") {\n      return (\n        <Weather data={{...this.state}} />\n      );\n    } else if (this.state.status === \"notfound\") {\n      return (\n        <NotFound />\n      );\n    } else {\n      return (\n        <div className=\"widget\">\n          Loading...\n        </div>\n      );\n    }\n  }\n}\n\nexport default Widget;\n","import React from 'react';\nimport Header from './components/Header.js'\nimport Widget from './components/Widget.js'\nimport './App.css';\n\nfunction App() {\n\n  let search = window.location.search;\n  let params = new URLSearchParams(search);\n  let city = params.get('city');\n\n\n  return (\n    <div className=\"App\">\n      <Header/>\n      <Widget city={city}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}